import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.prefs.Preferences;


/*
Connection -- a session with a specific database
Statement -- an object used for executing a static SQL statement and returning the results
ResultSet -- a table of data representing a database result set usually generated by executing a query to the database.
Preferences -- a way to store key value pairs persistently so that between processes the value does not reset.
*/

/*
    current functions
    -----------------------
    -- can look up whether a provider exists with try_provider_id(p_id)
    -- can look up whether a member exists AND is not suspended with try_member_id(m_id);
    -----------------------
    future functions
    -----------------------
    -- can add to the weekly file of services given all column information
    -- can read from the weekly file of services
    -----------------------

*/


public class myjdbc {
    private static Statement stmt;
    private static ResultSet rs;


    // service_number is primary key for weekly services
    static int service_number = 1;

    public static void insert_service_record(LocalDate service_date, String provider_id, String member_id, String service_code, String comments)
    {
        try
        {
            // get the preferences to set the service_record number (primary key)
            Preferences userPreferences = Preferences.userRoot();
            service_number = userPreferences.getInt("service_number", 0) + 1; // service_number++;
            // set the new service number
            userPreferences.putInt("service_number", service_number);


            // this is the query to insert a service record into the database
            // one of the entries is the service_number which is stored persistently using Preferences
            String query = "INSERT INTO `ChocAn`.`Weekly Service Record` (`service_number`, `current-date-time`, `service-date`, `provider_id`, `member_id`, `service_code`, `comments`)  " +
                    //"VALUES ('" +String.valueOf(service_number)+"', '"+ LocalDateTime.now()+"', '"+service_date+"', '"+provider_id+"', '"+member_id+"', '"+service_code+"', '" +comments +"');";
                    "VALUES ('" + userPreferences.getInt("service_number", 0)+"', '"+ LocalDateTime.now()+"', '"+service_date+"', '"+provider_id+"', '"+member_id+"', '"+service_code+"', '" +comments +"');";
                    // instead of doing a query, we are doing an update because we are updating a value in the database.
            //rs = stmt.executeQuery(query);
            stmt.executeUpdate(query);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }



    // return true if the provider id is found
    public static boolean try_provider_id(String p_id)
    {
        boolean exist = false; // return value
        try
        {
            rs = stmt.executeQuery("select * from Providers where id=" + p_id);
            exist = rs.next();
        }
        catch (Exception e)
        {
            //e.printStackTrace();
        }
        if (exist)
        {
            System.out.println("provider id accepted by database: " + p_id);
        }
        else
        {
            System.out.println("did not find provider id: " + p_id);
            System.out.println("please check that you have the right number");
        }
        return exist;
    }

    // return true if the member id is found (AND not suspended)
    public static boolean try_member_id(String m_id)
    {
        boolean valid_member; // return value
        int suspended; // flag changes to 1 when suspended

        try
        {
            rs = stmt.executeQuery("select * from Members where id=" + m_id);
            valid_member = rs.next(); // move to first row
            suspended = rs.getInt("suspended");
            String member_name = rs.getString("name");
            if (valid_member)
            {
                System.out.println("found member id: " + m_id);
                if (suspended == 1) {
                    System.out.println("member " + member_name + " with id: " + m_id + " is suspended");
                    return false;
                }
                System.out.println("member " + member_name + " with id: " + m_id + " is validated");
                return true;
            }
        }
        catch (Exception e)
        {
            //e.printStackTrace();
        }
        System.out.println("did not find member id: " + m_id);
        System.out.println("please check that you have the right number");
        return false;
    }

    public static void main(String[] args)
    {
        Preferences userPreferences = Preferences.userRoot();
        service_number = userPreferences.getInt("service_number", 0);
        if (service_number == 0) // there was no service_number saved
        {
            // save the service number key and value
            userPreferences.putInt("service_number", service_number);
        }


        String p_id = "123456789";
        String m_id = "112233";
        try // initialize connection to database
        {
            // enter ip address of server and user/password
            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/ChocAn", "wes", "potato");
            stmt = conn.createStatement();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        boolean provider_access = try_provider_id(p_id);
        boolean member_billing = try_member_id(m_id);
        
        if (provider_access && member_billing)
        {
            System.out.println("Access granted to member billing\n");
        }

        String provider_id = "123456788";
        String member_id = "123456788";
        String service_code = "656565";
        String comments = "example comment";
        insert_service_record(LocalDate.now(), provider_id, member_id, service_code, comments);
    }
}
